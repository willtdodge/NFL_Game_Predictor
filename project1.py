# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lu4UwFVzyn4vGnxOW7whmlpMTaSDFvZi
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import seaborn as sns
import statsmodels.api as sm
from sklearn.datasets import make_regression

df = pd.read_csv('nfl.csv')
df1 = pd.read_csv('ProjectProposalDataset.xlsx - out.csv')

df = df[~df['season'].isin(list(range(2002, 2009)) + [2023])]
df = df[~df['week'].isin(["Wildcard", "Division", "Conference", "SuperBowl"])]

df['home'] = df['season'].astype(str) + df['home']
df['away'] = df['season'].astype(str) + df['away']
df['home_away'] =df['home'] +df['away']
df['week'] = pd.to_numeric(df['week'], errors='coerce')

df = df.dropna(subset=['week'])

df.head()

df = pd.merge(df, df1, on='home_away', how='outer')

df=df.dropna()

df['possession_away']

df['possession_away'] = df['possession_away'].apply(lambda x: int(x.split(':')[
    0]) + int(x.split(':')[1])/60)
df['possession_home'] = df['possession_home'].apply(lambda x: int(x.split(':')[
    0]) + int(x.split(':')[1])/60)

columns_to_drop = ["Week", "schedule_date", "team_away_name", "team_home_name",
                   "team_home", "team_away","score_home_y", "score_away_y","date"]
df = df.drop(columns=columns_to_drop)

df.head()

train = df[df['season'] < 2021]
test = df[df['season'] == 2021]

X_df, y_df=df.iloc[:,list(range(1))+list(range(6,52))+list(range(68,72))],df['Score_Difference']

X_train,y_train,X_test, y_test=train.iloc[:,list(range(6,52))+list(range(68,72))
],train['Score_Difference'],test.iloc[:,list(range(6,52))+list(range(68,72))],test['Score_Difference']

model=LinearRegression()
model.fit(X_train,y_train)

model=DecisionTreeRegressor()
model.fit(X_train, y_train)

model=RandomForestRegressor(n_estimators=2000)
model.fit(X_train, y_train)

model.score(X_test,y_test)

df[f"{'Score_diff'}_pred"]=np.round(model.predict(X_df.iloc[:, 1:52]))

test[f"{'Score_diff'}_pred"]=np.round(model.predict(X_test))

rmse=mean_squared_error(df['Score_Difference'], df[f"{'Score_diff'}_pred"])**.5

title_text= f"""
RMSE: {round(rmse, 3)}
"""
sns.regplot(data=df, x=y_df, y=f"{'Score_diff'}_pred")
plt.title(title_text)
plt.show()

model = sm.OLS(y_test, sm.add_constant(X_test)).fit()
coefficients = np.round(model.params,3)
p_values = np.round(model.pvalues,3)
pd.DataFrame({'Coefficient': coefficients, 'P-value': p_values})

coefficients = np.round(model.coef_,4)

# Accessing the variable names
variable_names = model.feature_names_in_

# Displaying coefficients with variable names
for variable, coefficient in zip(variable_names, coefficients):
    print(f"{variable}: {coefficient}")

rf_feat_imp2=pd.DataFrame(data=model.feature_importances_.round(3),
                          index=X_test.columns, columns=['importance'])
rf_feat_imp2.sort_values(by=['importance'], ascending=False)

grouped = test.groupby('week')
best_bets = pd.DataFrame()
for name, group in grouped:
    group['diff'] = abs(group['Score_diff_pred'] - group['spread_favorite'])
    sorted_group = group.sort_values(by='diff', ascending=False)
    best_bets = pd.concat([best_bets, sorted_group.head(3)])
best_bets.drop(columns='diff', inplace=True)
best_bets

selected_columns = ['season', 'week', 'away', 'home', 'score_away_x', 'score_home_x', 'spread_favorite','Score_diff_pred', 'Score_Difference']

best_bets1 = best_bets.loc[:, selected_columns]

def calculate_amount(row):
    if (row['Score_diff_pred'] < row['spread_favorite'] and row['Score_Difference'] < row['spread_favorite']) or \
       (row['Score_diff_pred'] > row['spread_favorite'] and row['Score_Difference'] > row['spread_favorite']):
        return 20
    else:
        return 0
total_amount = best_bets1.apply(calculate_amount, axis=1).sum()

print("Total amount won in 2021: $", total_amount-(10*49))